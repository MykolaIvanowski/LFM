Data Structure specific algorithms
1. Arrays

    Sorting:

        QuickSort: Efficient average-case time complexity (O(nlog n))

        MergeSort: Stable sort, useful when order matters (O(nlog n))

    Searching:

        Binary Search: Fast search in sorted arrays (O(log n))

    Two Pointers:

        In-place manipulation, often for sorted arrays (e.g., removing duplicates)

    Sliding Window:

        Subarray problems, finding maximum/minimum within a window

2. Linked Lists

    Traversal:

        Iterate through the list, understand the node structure

    Insertion/Deletion:

        At beginning, end, or at a specific position

    Reversal:

        In-place reversal, recursive and iterative approaches

    Cycle Detection:

        Floyd's Tortoise and Hare algorithm

3. Hash Tables (Hash Maps/Sets)

    Implementation not needed. Just understand following:

        Understand how hash functions work

        Insertion/Deletion/Lookup

        Collision Handling

4. Trees (Binary Trees, Binary Search Trees, etc.)

    Traversal:

        Inorder, Preorder, Postorder (recursive and iterative)

    Searching:

        Find a node with a given value (especially in BSTs)

5. Stacks

    Implementation not needed. Just understand following:

        Push/Pop/Peek Operations

6. Queues

    Implementation not needed. Just understand following:

        Enqueue/Dequeue Operations

7. Heaps (Priority Queues)

    Implementation not needed. Just understand following:

        Insertion/Deletion (extract-min/max)

        Building a Heap

    Top K Elements:

        Using a heap to find k largest/smallest elements

8. Graphs

    Traversal:

        Breadth-First Search (BFS)

        Depth-First Search (DFS)

    Shortest Path:

        Dijkstra's Algorithm

    Cycle Detection:

        DFS

9. Tries

    Implement Trie from scratch

    Insertion/Searching:

        For words/prefixes

    Autocompletion:

        Using a trie for word suggestions

10. Union-Find (Disjoint Set)

    Implement Union-Find from scratch

    Find/Union Operations

    Cycle Detection in undirected graphs

General algorithms/techniques
1. Recursion

    Defining a problem in terms of itself, often leading to elegant and concise solutions.

    Solve: Factorial calculation, tree traversals, depth-first search.

2. Dynamic Programming

    Breaking down a problem into overlapping subproblems and storing solutions to avoid recomputation.

    Solve: Fibonacci sequence, Knapsack problem, Longest Common Subsequence.

3. Greedy Algorithms

    Making locally optimal choices at each step with the hope of finding a global optimum.

    Implement: Kruskal's algorithm for minimum spanning trees.

4. Backtracking

    Incrementally building solutions, exploring all possible paths, and abandoning invalid ones.

    Solve: Sudoku solver, N-Queens problem, generating permutations.


        *****

  Interview Master 100

    Two Sum [Solution]

    Valid Parentheses [Solution]

    Merge Two Sorted Lists [Solution]

    Best Time to Buy and Sell Stock [Solution]

    Valid Palindrome [Solution]

    Invert Binary Tree

    Valid Anagram

    Binary Search

    Linked List Cycle

    Maximum Depth of Binary Tree

    Single Number

    Reverse Linked List

    Majority Element

    Missing Number

    Reverse String

    Diameter of Binary Tree [Solution]

    Middle of the Linked List [Solution]

    Convert Sorted Array to Binary Search Tree

    Maximum Subarray [Solution]

    Climbing Stairs [Solution]

    Symmetric Tree [Solution]

    Product of Array Except Self [Solution]

    Best Time to Buy and Sell Stock II [Solution]

    House Robber [Solution]

    Number of 1 Bits

    Validate Binary Search Tree

    Min Stack [Solution]

    Contains Duplicate [Solution]

    Kth Smallest Element in a BST

    Merge Intervals [Solution]

    Set Matrix Zeroes [Solution]

    Spiral Matrix [Solution]

    3Sum [Solution]

    Binary Tree Zigzag Level Order Traversal

    Construct Binary Tree from Preorder and Inorder Traversal

    Container With Most Water [Solution]

    Flatten Binary Tree to Linked List [Solution]

    Group Anagrams [Solution]

    Implement Trie (Prefix Tree)

    Kth Largest Element in an Array

    Longest Palindromic Substring

    Longest Substring Without Repeating Characters [Solution]

    Maximal Square [Solution]

    Maximum Product Subarray

    Minimum Window Substring [Solution]

    Number of Islands [Solution]

    Permutations [Solution]

    Remove Nth Node From End of List

    Rotate Image [Solution]

    Search a 2D Matrix

    Search in Rotated Sorted Array

    Subsets [Solution]

    Top K Frequent Elements [Solution]

    Trapping Rain Water

    Two Sum II - Input Array Is Sorted

    Unique Paths

    Valid Sudoku

    Word Break

    Word Search

    Add Two Numbers [Solution]

    Basic Calculator

    Coin Change

    Combination Sum

    Copy List with Random Pointer

    Course Schedule [Solution]

    Design Add and Search Words Data Structure

    Merge Sorted Array

    Find Median from Data Stream

    Game of Life

    Jump Game

    Letter Combinations of a Phone Number

    Longest Consecutive Sequence [Solution]

    Longest Increasing Subsequence

    Median of Two Sorted Arrays

    Merge k Sorted Lists [Solution]

    Minimum Path Sum

    Word Search II

    Reverse Nodes in k-Group

    Course Schedule II

    Remove Element

    Rotate Array

    Bitwise AND of Numbers Range

    Palindrome Number

    Plus One

    Sqrt(x)

    Pow(x n) [Solution]

    Construct Binary Tree from Inorder and Postorder Traversal

    Path Sum

    Binary Tree Right Side View

    Binary Tree Level Order Traversal [Solution]

    Minimum Absolute Difference in BST

    Surrounded Regions

    Clone Graph

    Evaluate Division

    Generate Parentheses [Solution]

    Sort List

    Maximum Sum Circular Subarray

    Find Peak Element

    Find Minimum in Rotated Sorted Array [Solution]

    Remove Duplicates from Sorted Array

https://instabyte.io/p/interview-master-100