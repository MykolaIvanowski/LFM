
COALESCE(subquery,10): This function is used to return the first non-null value from a list.
 In this case, it will return the result of the subquery, or 10 if the subquery returns NULL.

coalesce(subquery to pass, return something if subquery return null)
coalesce((select ...), 10)
coalesce(A,B) --> if A is value return value if A is null return B

    ***

The LEFT() function in SQL is used to extract a specified number of characters
from the left side of a string.
It's quite handy when you need to isolate parts of a string based on a given length.
LEFT(string, number_of_characters)

SELECT full_name, LEFT(full_name, 3) AS name_initials
FROM employees;
This query will return a result set where each row includes the full_name and
the first three characters of that name as name_initials.

    ***

AVG(value) - counting average for all value passed

select name, avg(int_value) from table
group by name
-- grouped name will have average number of int_value (formula (int1+int2+int3)/3  )
name int_value
bob     2

    ***

using()

The USING() clause in SQL is used in joins to simplify the syntax when two tables
have one or more columns in common, typically with the same names

examples:

    SELECT columns
    FROM table1
    JOIN table2
    ON table1.common_column = table2.common_column;

the same:

    SELECT columns
    FROM table1
    JOIN table2
    USING (common_column);


    ***

The ROUND() function in SQL is used to round a numeric value
to a specified number of decimal places.
It's a useful function when you need to control the precision of your numeric data.

example:

SELECT ROUND(123.456, 2) as rounded_value;

rounded_value
123.46

    ***

The OVER() clause in SQL is used in conjunction with window functions to perform
calculations across a set of table rows that are somehow related to the current row.
This allows for more complex calculations and analytics without collapsing
the result set into grouped summaries.

Key feature:
Window Functions: Functions like ROW_NUMBER(), RANK(), DENSE_RANK(), SUM(), AVG(),
 COUNT(), MIN(), MAX(), LAG(), LEAD(), FIRST_VALUE(), and LAST_VALUE() can be used with OVER().

Partitioning: Divides the result set into partitions to which the window function is applied.

Ordering: Specifies the order in which the rows are processed in the window.


SELECT employee_id, department, salary,
       ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) as row_num
FROM employees;
This query assigns a unique row number to each employee within their department,
ordered by salary in descending order.


SELECT employee_id, department, salary,
       SUM(salary) OVER (PARTITION BY department ORDER BY salary DESC) as running_total
FROM employees;
This query returns the previous salary for each employee,
using a default value of 0 if there is no previous row.


SELECT sales_date, sales_amount,
       AVG(sales_amount) OVER (
            ORDER BY sales_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
            ) as moving_avg
FROM sales;
This query calculates a moving average of sales amounts over
the current row and the two preceding rows.


OVER(): Defines the window over which the function operates.

    PARTITION BY: Divides the result set into partitions.

    ORDER BY: Orders the rows within each partition.

    ROWS BETWEEN: Defines the range of rows for window frame operations.
    
Summary
The OVER() clause enhances SQL's capability to perform complex calculations
over rows of data without collapsing them into grouped summaries.
It maintains detailed information while allowing for aggregate-like calculations.

(If it say in simple way it is kind of group by operation)


    ***

  DATEDIFF()
The DATEDIFF() function in SQL is used to calculate the difference between two dates.
It returns the number of days between the start date and the end date.

examples:

SELECT order_id, order_date, delivery_date,
       DATEDIFF(delivery_date, order_date) as days_between
FROM orders;

DATEDIFF(delivery_date, order_date):
Calculates the difference in days between the delivery_date and order_date for each row.

    ***

ROW_NUMBER():

Assigns a sequential integer to rows in a result set.
Used for tasks like PAGINATION, RANKING, and NUMBERING ROWS.
Requires an OVER clause with ORDER BY to specify the sequence.

example of numbering rows:
SELECT
    employee_id,
    name,
    age,
    department,
    ROW_NUMBER() OVER (ORDER BY employee_id) AS row_num
FROM
    employees;

example of pagination:
WITH numbered_employees AS (
    SELECT
        employee_id,
        name,
        age,
        department,
        ROW_NUMBER() OVER (ORDER BY employee_id) AS row_num
    FROM
        employees
)
SELECT *
FROM numbered_employees
WHERE row_num BETWEEN 1 AND 10;
This query assigns row numbers to all employees and then filters to show only rows 1 through 10.

    ***
The DATEADD function in SQL is used to add a specific interval to a date.
The syntax can vary slightly depending on the SQL database you're using
(e.g., SQL Server, MySQL, PostgreSQL), but here's a general example using SQL Server syntax:

DATEADD(interval, number, date)

Hereâ€™s an example that adds 5 days to the current date:
SELECT DATEADD(day, 5, GETDATE()) AS NewDate;

For a specific date, you can replace GETDATE() with your date:
SELECT DATEADD(day, 10, '2025-01-01') AS NewDate;

For postgresql insted of dateadd() need use INTERVAL:
SELECT NOW() - INTERVAL '5 days' AS five_days_ago;

    ***
postgres INTERVAL
In PostgreSQL, the INTERVAL type is used to represent a period of time (a duration).
You can use it to add or subtract time from a DATE, TIME, or TIMESTAMP value.
You can specify the interval in terms of years, months, days, hours, minutes, seconds, etc

Adding an Interval:
SELECT NOW() + INTERVAL '1 year' AS next_year;

Subtracting an Interval:
SELECT NOW() - INTERVAL '3 days' AS three_days_ago;

Combining Multiple Units:
SELECT NOW() + INTERVAL '1 year 2 months 3 days' AS future_date;

Using Intervals in a WHERE Clause:
SELECT *
FROM your_table_name
WHERE order_date > NOW() - INTERVAL '30 days';

Interval Arithmetic:
SELECT INTERVAL '2 hours' + INTERVAL '30 minutes' AS total_time;

    ***
TURNCATE()
The date_trunc function in PostgreSQL is used to truncate a timestamp or date to a
specified level of precision, such as year, month, day, etc.
This can be especially useful for grouping and comparing dates at a specific granularity.
date_trunc('precision', your_date_column)


EXAMPLE:
date_trunc('month',s.order_date)='2021-01-01'
In PostgreSQL, when using the date_trunc function, the result is a date or timestamp.
You can't directly compare this result to a string like '2021-01-01'.
Instead, you should cast the result to a date for comparison.